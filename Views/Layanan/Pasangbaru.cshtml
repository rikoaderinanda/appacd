@{
    ViewData["Title"] = "Layanan";
    ViewData["Header"] = "2";
    ViewData["Footer"] = "3";
    ViewData["HeaderName"] = "Layanan - Pasang Baru";
}
<!-- CSS -->
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<!-- JS -->
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

<style>
    /* Wizard container */
    .wizard-steps {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
        position: relative;
        padding: 0 10px;
    }

    /* Garis penghubung */
    .wizard-steps::before {
        content: "";
        position: absolute;
        top: 18px;
        left: 0;
        width: 100%;
        height: 2px;
        background-color: #e5e7eb;
        z-index: 0;
    }

    /* Step item */
    .wizard-step {
        text-align: center;
        position: relative;
        z-index: 1;
        flex: 1;
    }

    /* Nomor step */
    .step-number {
        width: 36px;
        height: 36px;
        line-height: 36px;
        background-color: #d1d5db;
        color: #fff;
        border-radius: 50%;
        margin: auto;
        font-size: 14px;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }

    /* Nama step */
    .step-title {
        margin-top: 6px;
        font-size: 12px;
        font-weight: 500;
        color: #6b7280;
    }

    /* Step aktif */
    .wizard-step.active .step-number {
        background-color: #2563eb;
        transform: scale(1.1);
    }
    .wizard-step.active .step-title {
        color: #2563eb;
        font-weight: 600;
    }

    /* Step selesai */
    .wizard-step.completed .step-number {
        background-color: #16a34a;
    }
    .wizard-step.completed .step-title {
        color: #16a34a;
    }

    /* Konten */
    .wizard-content {
        background: #fff;
        border-radius: 6px;
        padding: 15px;
        border: 1px solid #f0f0f0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.03);
        transition: opacity 0.3s ease;
        font-size: 14px;
        padding-bottom: 30px;
    }

    /* Tombol navigasi */
    .btn-wizard {
        min-width: 100px;
        font-weight: 500;
        border-radius: 6px;
        padding: 6px 14px;
        font-size: 14px;
    }

    .wizard-footer {
        position: absolute;
        bottom: 15px;
        right: 15px;
    }
</style>

<div class="app-body">
    <div class="container">
        <div class="row pt-30">
            <div class="wizard-steps">
                <div class="wizard-step active" data-step="1">
                    <div class="step-number">1</div>
                    <div class="step-title">Alamat</div>
                </div>
                <div class="wizard-step" data-step="2">
                    <div class="step-number">2</div>
                    <div class="step-title">Layanan</div>
                </div>
                <div class="wizard-step" data-step="3">
                    <div class="step-number">3</div>
                    <div class="step-title">Jadwal</div>
                </div>
                <div class="wizard-step" data-step="4">
                    <div class="step-number">4</div>
                    <div class="step-title">Properti</div>
                </div>
                
                <div class="wizard-step" data-step="5">
                    <div class="step-number">5</div>
                    <div class="step-title">Bayar</div>
                </div>
            </div>

            <div id="wizardForm">
                <!-- STEP 1 -->
                <div class="wizard-content d-none" data-step="1">
                    <div class="pb-30" id="sessionDataPelanggan">
                        @await Html.PartialAsync("_InfoKontak")
                        @await Html.PartialAsync("_AlamatPelanggan")
                    </div>
                    <div class="d-flex justify-content-between pt-30">
                        <button type="button" class="btn btn-secondary btn-wizard prev-btn" onclick="gotoBack()">Batal</button>
                        <button type="button" class="btn btn-primary btn-wizard next-btn">Lanjut</button>
                    </div>
                </div>

                <!-- STEP 2 -->
                <div class="wizard-content" data-step="2" style="position: relative; min-height: 200px;">
                    <div class="pb-30" id="sessionJasaLayanan">
                        @await Html.PartialAsync("_LayananPasangBaru")
                    </div>                    

                    <!-- Tombol di pojok kanan bawah -->
                    <div class="d-flex justify-content-between pt-30">
                        <button type="button" class="btn btn-secondary btn-wizard prev-btn">Kembali</button>
                        <button type="button" class="btn btn-primary btn-wizard next-btn">Lanjut</button>
                    </div>
                </div>
                <!-- STEP 3 -->
                <div class="wizard-content" data-step="3" style="position: relative; min-height: 200px;">
                    @await Html.PartialAsync("_Jadwal_Relokasi")

                    <div class="d-flex justify-content-between pt-30">
                        <button type="button" class="btn btn-secondary btn-wizard prev-btn">Kembali</button>
                        <button type="button" class="btn btn-primary btn-wizard next-btn">Lanjut</button>
                    </div>
                </div>

                <!-- STEP 4 -->
                <div class="wizard-content d-none" data-step="4">
                    <div class="pb-30" id="sessionJenisProperti">
                        @await Html.PartialAsync("_JenisProperti")
                    </div>
                    <div class="d-flex justify-content-between pt-30">
                        <button type="button" class="btn btn-secondary btn-wizard prev-btn">Kembali</button>
                        <button type="button" class="btn btn-primary btn-wizard next-btn">Lanjut</button>
                    </div>
                </div>

                <div class="wizard-content d-none" data-step="5">
                    <div class="pb-30" id="sessionPaymentMethod">
                        @await Html.PartialAsync("_PilihMetodaPembayaran")
                    </div>
                    <div class="d-flex flex-wrap justify-content-between gap-2 mt-3" id="panelSelesai">
                        <button type="button" class="btn btn-outline-secondary btn-wizard flex-fill prev-btn">
                            <i class="bi bi-arrow-left"></i> Kembali
                        </button>
                        <button type="button" class="btn btn-warning btn-wizard flex-fill" onclick="SimpanDulu()" id="btn_simpandulu">
                            <i class="bi bi-save"></i> Simpan Dulu
                        </button>
                        <button type="button" class="btn btn-success btn-wizard flex-fill" onclick="Checkout();" id="btnCheckOut">
                            <i class="bi bi-check-circle"></i> Checkout
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let currentStep = 1;
let IdUser;

let IdTrx = 0;
let kategoriLayanan = 'PASANG BARU AC';
let RegAtauMember = 'REG';
let TotalHargaAkhir = 0;
let cartReguler = [];
let cartMember = [];

let paketMember = {};

let KunjunganReg = {};
let KunjunganMember = [];

let JenisProperti = {};

let kontakPelanggan = {};
let AlamatPelanggan = {};
let keluhanPerbaikan = [];
var $;

document.addEventListener('DOMContentLoaded', function () {
    if (typeof window.jQuery === 'undefined') {
        console.error('jQuery is not loaded.');
        return;
    }
    $ = window.jQuery;
    eventstep_btn();
    showStep(currentStep);
    var user = getUserInfo();
    if (!isValidUser(user)) {
        $('#TitleModalLogin').text('Silahkan login terlebih dahulu');
        $('#btnClsModalLogin').show();
        $('#ModalLogin').modal('show');
        return false;
    } else {
        IdUser = user.id;
        setDataTrx();
        loadAlamat();
        LoadDataKontak();
    }
});

function setDataTrx() {
    var DataTrx = Storage.get('DataTrx');
    console.log(DataTrx);
    if (!isEmptyObject(DataTrx) && DataTrx != null) {
        console.log(DataTrx);
        kontakPelanggan = DataTrx.kontakPelanggan;
        AlamatPelanggan = DataTrx.alamatPelanggan;
        cartReguler = DataTrx.cartItem.Reguler;
        KunjunganReg = DataTrx.kunjungan.Reguler;
        KunjunganMember = DataTrx.kunjungan.Member;
        JenisProperti = DataTrx.jenisProperti;
        IdTrx = DataTrx.id;
        TotalHargaAkhir = DataTrx.totalTransaksi;
        paketMember = DataTrx.paketMember;
        RegAtauMember = DataTrx.jenisLayanan;
    }
}

function showStep(step) {
    document.querySelectorAll('.wizard-content').forEach((el) => {
        el.classList.toggle('d-none', el.dataset.step != step);
    });

    document.querySelectorAll('.wizard-step').forEach((el) => {
        el.classList.remove('active', 'completed');
        const stepNum = parseInt(el.dataset.step);
        if (stepNum < step) {
            el.classList.add('completed');
        } else if (stepNum === step) {
            el.classList.add('active');
        }
    });
}

function eventstep_btn() {
    document.querySelectorAll('.next-btn').forEach((btn) => {
        btn.addEventListener('click', () => {
            if (validasiStep(currentStep)) {
                if (currentStep < 6) {
                    currentStep++;
                    showStep(currentStep);
                }
            }
        });
    });

    document.querySelectorAll('.prev-btn').forEach((btn) => {
        btn.addEventListener('click', () => {
            if (currentStep > 1) {
                currentStep--;
                showStep(currentStep);
            }
        });
    });
}

function validasiStep(step) {
    if (step === 1) {
        if (isEmptyObject(kontakPelanggan)) {
            showToast('Silahkan pilih kontak yang akan dihubungi teknisi');
            return false;
        }
        if (isEmptyObject(AlamatPelanggan)) {
            showToast('Silahkan pilih Alamat yang akan dikunjungi teknisi');
            return false;
        }
    } else if (step === 2) {
        console.log(cartReguler);
        console.log(RegAtauMember);
        console.log(TotalHargaAkhir);
        console.log(cartMember);
        if (Array.isArray(cartReguler) && cartReguler.length > 0 && cartReguler != null) {
        }
        else {
            showToast("Silahkan pilih layanan");
            return false;    
        }
        console.log(TotalHargaAkhir);
    } else if (step === 3) {
        var tanggalLayanan = $('#tanggalLayanan').val();
        var jamLayanan = $('#jamLayanan').val();
        if (tanggalLayanan == '' || jamLayanan == '') {
            showToast('Silahkan isi jadwal kunjungan');
            return false;
        }

        Kunjungan = {
            tanggal: tanggalLayanan,
            jam: jamLayanan
        };
    } else if (step === 4) {
        if (isEmptyObject(JenisProperti)) {
            showToast('Silakan pilih properti terlebih dahulu.');
            return false;
        }

        var alldata =
        {
            id: IdTrx,
            createByIdUser: IdUser,
            kategoriLayanan: "PASANG BARU AC",
            jenisLayanan: RegAtauMember,
            totalTransaksi: TotalHargaAkhir,
            status: 0,
            statusDeskripsi: "DRAFT",
            jenisProperti: JenisProperti,
            kontakPelanggan:kontakPelanggan,
            alamatPelanggan: AlamatPelanggan,
            kunjungan: {
                Reguler: KunjunganReg,
                Member: KunjunganMember
            },
            cartItem: {
                Reguler: cartReguler,
                Member: cartMember
            },
            paketMember:paketMember,
            keluhanPerbaikan:keluhanPerbaikan
        }
        $('#listTransaksi').html('');
        renderDataTransaksi(alldata);
    }
    return true;
}

function gotoBack() {
    window.location.href = '/';
}

function renderDataTransaksi(data) {
    let Total = 0;
    var scr = `
                <div class="fw-bold text-prima">Kunjungan Layanan Reguler</div>
                <small class="text-muted">pada tanggal ${data.kunjungan.Reguler.tanggal} jam ${data.kunjungan.Reguler.jam}</small>
            `;
    $('#listTransaksi').append(scr);

    $.map(data.cartItem.Reguler, function (item) {
        var scr = `
                    <div class="d-flex justify-content-between align-items-center border-bottom py-2">
                        <div>
                            <div class="fw-bold">${item.nama}</div>
                            <small class="text-muted">${formatRupiah(
                                item.after_diskon
                            )} x ${item.qty}</small>
                        </div>
                        <div class="fw-bold">${formatRupiah(
                            item.after_diskon * item.qty
                        )}</div>
                    </div>
                `;
        $('#listTransaksi').append(scr);

        Total = Total + item.after_diskon * item.qty;
    });
    $('#listTransaksi').append(`
                <div class="d-flex justify-content-between align-items-center mt-30">
                    <div>      
                        <div class="fw-bold">Sub Total</div>
                    </div>
                    <div class="fw-bold">${formatRupiah(Total)}</div>
                </div>
            `);
    var scr = `
                <div class="d-flex justify-content-between align-items-center border-bottom">
                    <div>
                        <div class="fw-bold">Biaya properti : ${
                            data.jenisProperti.nama_jenis
                        }</div>
                    </div>
                    <div class="fw-bold">${formatRupiah(
                        data.jenisProperti.harga
                    )}</div>
                </div>
            `;
    $('#listTransaksi').append(scr);
    Total = Total + data.jenisProperti.harga;
    $('#totalTransaksi').text(formatRupiah(Total));
    TotalHargaAkhir = Total;
}

function setCartReg(data) {
    let existingItem = cartReguler.find((item) => item.nama === data.nama);
    if (existingItem) {
        if (data.qty == 0) {
            let index = cartReguler.findIndex(
                (item) => item.nama === data.nama
            );
            if (index !== -1) {
                cartReguler.splice(index, 1);
            }
        } else {
            existingItem.qty = data.qty;
            existingItem.harga = data.harga;
            existingItem.diskon = data.diskon;
            existingItem.after_diskon = data.after_diskon;
            existingItem.sub_total = data.subtotal;
        }
    } else {
        cartReguler.push({
            id: data.id,
            nama: data.nama,
            harga: data.harga,
            diskon: data.diskon,
            after_diskon: data.after_diskon,
            qty: data.qty,
            sub_total: data.subtotal
        });
    }
}

async function SimpanDulu() {
        try {
            var alldata = {
                id: IdTrx,
                createByIdUser: IdUser,
                kategoriLayanan: kategoriLayanan,
                jenisLayanan: RegAtauMember,
                totalTransaksi: TotalHargaAkhir,
                status: 0,
                statusDeskripsi: "DRAFT",
                jenisProperti: JenisProperti,
                kontakPelanggan: kontakPelanggan,
                alamatPelanggan: AlamatPelanggan,
                kunjungan: {
                    Reguler: KunjunganReg,
                    Member: KunjunganMember
                },
                cartItem: {
                    Reguler: cartReguler,
                    Member: cartMember
                },
                paketMember: paketMember,
                keluhanPerbaikan: keluhanPerbaikan
            };
            var data = await SimpanTransaksi(alldata);
            console.log("Hasil simpan:", data);

            if (data) {
                Swal.fire({
                    title: '<strong>🎉 Berhasil Disimpan!</strong>',
                    html: 'Pesananmu telah ditambahkan ke keranjang.<br><small>Kamu akan diarahkan ke halaman <b>Keranjang Pesanan</b>.</small>',
                    icon: 'success',
                    showConfirmButton: true,
                    confirmButtonText: 'Lihat Keranjang',
                    customClass: {
                        popup: 'rounded-4 shadow-lg',
                        title: 'fw-bold text-success',
                        confirmButton: 'btn btn-primary px-4 py-2 rounded-pill',
                    },
                    showClass: {
                        popup: 'animate__animated animate__fadeInDown'
                    },
                    hideClass: {
                        popup: 'animate__animated animate__fadeOutUp'
                    }
                }).then(() => {
                    window.location.href = '@Url.Action("Index", "Cart")';
                });
            }

        } catch (err) {
            console.error("Gagal simpan:", err);
            Swal.fire({
                title: "⚠️ Gagal",
                text: "Terjadi kesalahan saat menyimpan pesanan.",
                icon: "error"
            });
        }
    }
async function SimpanTransaksi(data) {
    return new Promise((resolve, reject) => {
        callApi({
            url: '/api/Transaction/SimpanDulu',
            method: 'POST',
            data: data,
            success: function (res) {
                resolve(res); // return hasil sukses
            },
            error: function (err) {
                reject(err); // return error ke caller
            },
            onBeforeSend: function () {
                $("#btn_simpandulu").prop("disabled", true).text("Memproses...");
                $("#btnCheckOut").prop("disabled", true).text("Memproses...");
            },
            onComplete: function () {
                $("#btn_simpandulu").prop("disabled", false).text("Simpan Dulu");
                $("#btnCheckOut").prop("disabled", false).text("Checkout");
            }
        });
    });
}

async function Checkout(){
        
        if ($('input[name="payment_channel"]:checked').length > 0)
        {
            try 
            {
                var method = $('input[name="payment_channel"]:checked').val();
                console.log(method);
                var datatrx = {
                    id: IdTrx,
                    createByIdUser: IdUser,
                    kategoriLayanan: kategoriLayanan,
                    jenisLayanan: RegAtauMember,
                    totalTransaksi: TotalHargaAkhir,
                    status: 0,
                    statusDeskripsi: "DRAFT",
                    jenisProperti: JenisProperti,
                    kontakPelanggan: kontakPelanggan,
                    alamatPelanggan: AlamatPelanggan,
                    kunjungan: {
                        Reguler: KunjunganReg,
                        Member: KunjunganMember
                    },
                    cartItem: {
                        Reguler: cartReguler,
                        Member: cartMember
                    },
                    paketMember: paketMember,
                    keluhanPerbaikan: keluhanPerbaikan
                };
                var data = await SimpanTransaksi(datatrx);
                console.log("Hasil simpan:", data);
                datatrx.id = data.id;
                setDataCheckOut(datatrx,method);
                

            } catch (err) {
                console.error("Gagal simpan:", err);
                Swal.fire({
                    title: "⚠️ Gagal",
                    text: "Terjadi kesalahan saat menyimpan pesanan.",
                    icon: "error"
                });
            }
        }
        else{
            showToast("Silahkan pilih metode pembayaran");
        }
    }

    async function setDataCheckOut(datatrx,method){
        if (datatrx.id > 0) {
            var _order_items = [];
            $.map(datatrx.cartItem.Reguler, function (item) {
                if(!isEmptyObject(datatrx.paketMember)){
                    let qtymember = datatrx.paketMember.qty;
                    var dt = {
                        sku: item.id,
                        name: `${datatrx.paketMember.nama_layanan} - ${datatrx.paketMember.nama_paket} - ${datatrx.paketMember.deskripsi}`,
                        price: datatrx.paketMember.total,
                        quantity: 1
                    };
                    _order_items.push(dt);
                }
                else
                {
                    var dt = {
                        sku: item.id,
                        name: item.nama,
                        price: item.after_diskon,
                        quantity: item.qty
                    };
                    _order_items.push(dt);
                }
            });
            
            var dt = {
                sku: datatrx.jenisProperti.id,
                name: 'biaya Properti: ' + datatrx.jenisProperti.nama_jenis,
                price: datatrx.jenisProperti.harga,
                quantity: 1
            };
            _order_items.push(dt);

            let emailuser = Storage.get('email');

            var dataCheckOut = {
                method: method,
                merchant_ref: `ACD-${formatToSixDigits(datatrx.id)}`,
                amount: datatrx.totalTransaksi,
                customer_name: datatrx.kontakPelanggan.nama,
                customer_email: emailuser,
                customer_phone: datatrx.kontakPelanggan.nomor,
                order_items: _order_items,
                callback_url: '',
                return_url: '',
                expired_time: 0,
                signature: ''
            };
            console.log(dataCheckOut);
            var checkout = await InstruksiBayar(dataCheckOut,{id:"btnCheckOut",txtProcess:"Memproses...",txtfinish:"Checkout"});
            console.log(checkout);
            if (checkout.success) {
                var tripay_reff =
                {
                    reference : checkout.data.reference,
                    merchant_ref : checkout.data.merchant_ref,
                    payment_method : checkout.data.payment_method,
                    payment_name : checkout.data.payment_name,
                    amount : checkout.data.amount,
                    fee_merchant : checkout.data.fee_merchant,
                    fee_customer : checkout.data.fee_customer,
                    total_fee : checkout.data.total_fee,
                    amount_received : checkout.data.amount_received,
                    pay_code : checkout.data.pay_code,
                    pay_url : checkout.data.pay_url,
                    checkout_url : checkout.data.checkout_url,
                    status : checkout.data.status,
                    expired_time : checkout.data.expired_time,
                    instructions : checkout.data.instructions
                }
                var dataapi = {
                    Id : datatrx.id,
                    noRefCheckout : checkout.data.reference,
                    tripayReq : tripay_reff
                }
                var res =  await CheckOutTrx(dataapi,{id:"btnCheckOut",txtProcess:"Memproses...",txtfinish:"Checkout"});
                console.log(res);
                if(res.success){
                    Storage.set("payment",dataapi);
                    window.location.href = '@Url.Action("InstruksiPembayaran", "Pembayaran")';
                }
            } else {
                 console.log(checkout);
                 Swal.fire('Gagal!', checkout.message, 'warning');
            }
        }
        else
        {
            showToast("Data tidak valid");
        }
    }

</script>